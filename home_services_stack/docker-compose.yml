# docker-compose for Stack of Swag + Homarr + HomeAssistant + WyzeBridge
# need to modify the swag configs in /data/docker/swag/config/nginx/proxy-confs/ to match

x-extra_hosts:
  # This is added so that within each service you can communicate to another service by using the DNS name of the host rather
  # than using IP address. Makes it easy if the IP address changes. For example, when configuring Radarr, you can
  # configure the transmission client url as http://host-server:9091
  &host-server
  # Pulls the IP address of the host from the .env file
  - "host-server:${HOST_IP}"

services:
  # Reverse proxy for all services hosted on the RPI
  # services are exposed via the domain name sent through the URL, configured via the conf files in nginx 
  swag:
    image: linuxserver/swag:latest    # https://docs.linuxserver.io/general/swag/#docker-compose
    container_name: swag
    hostname: swag
    extra_hosts: *host-server
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    networks:
      - homelab_net
      - media_net
    ports:
      # 80:80  # only needed if using http validation. We're using duckdns to validate, so don't need this
      - 443:443
    secrets:
      - DUCKDNSTOKEN
    environment:
      # Choose one of the following methods to set environment variables
      # 1. Set variables directly in the compose file
      # PUID: 1003
      # PGID: 1003
      TZ: ${TZ:-Australia/Melbourne}
      # URL: ${SWAG_URL:?Please configure SWAG_URL in .env file}

      # 2. Set variables via substitution from .env file
      PUID: ${SWAG_UID:?Please configure SWAG_UID in .env file} # TODO: not resepecting the .env file, using direct values for now
      PGID: ${SWAG_GID:?Please configure SWAG_GID in .env file} # TODO: not resepecting the .env file, using direct values for now
      URL: ${SWAG_URL:?Please configure SWAG_URL in .env file} # TODO: not resepecting the .env file, using direct values for now

      SUBDOMAINS: wildcard
      VALIDATION: duckdns
      FILE__DUCKDNSTOKEN: /run/secrets/DUCKDNSTOKEN
      #CERTPROVIDER: zerossl  # defaults to letsencrypt
      #EMAIL:   # required when using zerossl as cert provider
    volumes:
      - ${CONFIG_DIR}/swag:/config
  
  
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    hostname: adguardhome
    extra_hosts: *host-server
    restart: unless-stopped
    networks:
      - homelab_net
    ports:
      # Plain DNS
      - '53:53/tcp'
      - '53:53/udp'
      # AdGuard Home Admin Panel as well as DNS-over-HTTPS
      - '80:80/tcp'
      - '443:443/tcp'
      - '443:443/udp'
      - '3000:3000/tcp'
      # DNS-over-TLS
      - '853:853/tcp'
      # DNS-over-QUIC
      #- '784:784/udp'
      #- '853:853/udp'
      #- '8853:8853/udp'
      # DNSCrypt
      - '5443:5443/tcp'
      - '5443:5443/udp'
      # Uncomment the below ports if you want to use AdGuard Home as a DHCP server
      #- 67:67/udp     # DHCP
      #- 68:68/udp     # DHCP
      #- 68:68/tcp     # DHCP
    environment:
      TZ: ${TZ:-Australia/Melbourne}
    volumes:
      - ${CONFIG_DIR}/adguard/work:/opt/adguardhome/work
      - ${CONFIG_DIR}/adguard/conf:/opt/adguardhome/conf


  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: homarr
    hostname: homarr
    extra_hosts: *host-server
    restart: unless-stopped
    networks:
      - homelab_net
      - media_net
    # no need to expose ports via docker, as the container is accessed via Swag. Left for posterity
    ports:
      - 7575:7575
    environment:
      DISABLE_ANALYTICS: TRUE
      # Choose one of the following methods to set environment variables
      # 1. Set variables directly in the compose file
      # PUID: 1019
      # PGID: 1019
      TZ: ${TZ:-Australia/Melbourne}

      # 2. Set variables via substitution from .env file
      PUID: ${HOMARR_UID:?Please configure HOMARR_UID in .env file} # TODO: not resepecting the .env file, using direct values for now
      PGID: ${HOMARR_GID:?Please configure HOMARR_UID in .env file} # TODO: not resepecting the .env file, using direct values for now
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - ${CONFIG_DIR}/homarr/configs:/app/data/configs
      - ${CONFIG_DIR}/homarr/icons:/app/public/icons
      - ${CONFIG_DIR}/homarr/data:/data

  # A notification aggregator that is used to send watchtower / sonarr / radarr etc. notifications to discord
  # also used to facilitate Trash-Guides sync for sonarr / radarr via a GUI.
  notifiarr:
    image: golift/notifiarr
    container_name: notifiarr
    hostname: notifiarr
    extra_hosts: *host-server
    restart: unless-stopped
    user: ${NOTIFIARR_UID:?Please configure NOTIFIARR_UID in .env file}:${NOTIFIARR_GID:?Please configure NOTIFIARR_GID in .env file}
    networks:
      - media_net   # unsure if notifiarr needs to be on the media_net network, but it's a media service so it's here for now
    ports:
      - 5454:5454
    environment:
      TZ: ${TZ:-Australia/Melbourne}
    volumes:
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/notifiarr:/config
      - /var/run/utmp:/var/run/utmp
      - /etc/machine-id:/etc/machine-id


  # Do all of the home automation stuff here
  homeassistant:
    image: linuxserver/homeassistant:latest
    container_name: homeassistant
    hostname: homeassistant
    extra_hosts: *host-server   # this might work to allow the nginx config for homeassistant to reference the host IP by name
    network_mode: host  # home assistant needs network_mode: host for auto discovery and bluetooth
    restart: unless-stopped
    # ports not needed, as this containers is exposed on the host network stack via network_mode: host
    environment:
      # Choose one of the following methods to set environment variables
      # 1. Set variables directly in the compose file
      # PUID: 1006
      # PGID: 1006
      TZ: ${TZ:-Australia/Melbourne}

      # 2. Set variables via substitution from .env file
      PUID: ${HOMEASSISTANT_UID:?Please configure HOMEASSISTANT_UID in .env file} # TODO: not resepecting the .env file, using direct values for now
      PGID: ${HOMEASSISTANT_GID:?Please configure HOMEASSISTANT_GID in .env file} # TODO: not resepecting the .env file, using direct values for now

    volumes:
      - ${CONFIG_DIR}/homeassistant/config:/config
      - /run/dbus:/run/dbus:ro
  

  # Bridge to allow Wyze cameras to be used in HomeAssistant via RTSP. https://github.com/mrlt8/docker-wyze-bridge
  wyze-bridge:
    image: mrlt8/wyze-bridge:latest
    container_name: wyze-bridge
    hostname: wyze-bridge
    extra_hosts: *host-server
    restart: unless-stopped
    # This container needs to run as root, else it throws lots of errors
    #user: ${WYZEBRIDGE_UID:?Please configure WYZEBRIDGE_UID in .env file}:${WYZEBRIDGE_GID:?Please configure WYZEBRIDGE_GID in .env file}
    networks:
      - homelab_net
    ports:
      # TODO: harden ports
      #- 1935:1935 # RTMP - worst. probably don't want this
      - 8554:8554 # RTSP - next best. 
      - 8888:8888 # HLS - 2nd best. Working on the wyzecam v3
      #- 8889:8889 # WebRTC - best. Doesn't seem to be working on the wyzecam v3 though
      - 8189:8189/udp # WebRTC/ICE
      - 5000:5000 # WEB-UI
    secrets:
      # Due to the way that the fix for having secrets referenced via files was implemented (see
      # https://github.com/mrlt8/docker-wyze-bridge/issues/1244), if these these secrets exist the are read directly.
      # no need to set them in the environment variables
      - WYZE_EMAIL
      - WYZE_PASSWORD
      - API_ID
      - API_KEY
      - WB_USERNAME
      - WB_PASSWORD
    environment:
      TZ: ${TZ:-Australia/Melbourne}

      # [OPTIONAL] Credentials can be set in the WebUI, but every time the container is restarted, the credentials will need to be re-entered.
      # instead, they are now all set via secrets and read from /run/secrets as per https://github.com/mrlt8/docker-wyze-bridge/issues/1244

      # API Key and ID can be obtained from the wyze dev portal: 
      # https://developer-api-console.wyze.com/#/apikey/view

      # [OPTIONAL] IP Address of the host to enable WebRTC e.g.,:
      WB_IP: host-server

# want to define a network range so that we can explicitly trust that network in the homeassistant config    
networks:
  homelab_net:
    name: homelab_net   # ensure network isn't prefixed with the default name of the directory, eg git_home_services_stack_homelab_net
    attachable: true
    ipam:
      config:
        - subnet: 172.100.0.0/24
  media_net:
    # Note: if the media stack has not been started, manually define the media_net network with
    # docker network create --attachable --subnet=172.200.0.0/24 media_net
    external: true

secrets:
  DUCKDNSTOKEN:
    file: ${SECRETS}/swag/duckdns_token
  WYZE_EMAIL:
    file: ${SECRETS}/wyzebridge/wyze_account_email
  WYZE_PASSWORD:
    file: ${SECRETS}/wyzebridge/wyze_account_password
  API_ID:
    file: ${SECRETS}/wyzebridge/wyze_api_id
  API_KEY:
    file: ${SECRETS}/wyzebridge/wyze_api_key
  WB_USERNAME:
    file: ${SECRETS}/wyzebridge/wyze_bridge_webapp_username
  WB_PASSWORD:
    file: ${SECRETS}/wyzebridge/wyze_bridge_webapp_password

