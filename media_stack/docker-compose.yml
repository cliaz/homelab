x-extra_hosts:
  # This is added so that within each service/container you can communicate to another service by using a DNS rather
  # than using IP address. Makes it easy if the IP address changes. For example, when configuring Radarr, you can
  # configure the transmission client url as http://host-server:9091

  # Pulls the IP address of the host from the .env file
  &host-server
  - "host-server:${HOST_IP}"
services:
  # All the services use docker bind mounts to store config data and media on the host's filesystem. If you're familiar with
  # docker storage, you can use whatever you want. You can change it to use docker volumes if you want.
  #
  # Nearly all the containers can be run as non root. This is controlled by PUID and PGID environment variables.
  # Make sure any volume directories on the host are owned by the same user you specify to run the container as. Else
  # you may have permissions issues.
  #
  # If you dont want any service, you can delete that section. Alternatively, if you want to use another service or
  # add more services, you can add/change them in this file.
  # For example: if you want to use Emby instead of Plex, you can change the plex service to emby. Linuxserver.io
  # provide most of the docker images that you would need. They provide a docker image for emby as well.
  #
  # Each services runs on a different port number. Plex and transmission-openvpn uses host networking mode whereas all
  # the other services use docker bridge networking and have host ports mapped to container ports. For these you can
  # change the mapping between host ports and container ports. Port mapping is in the format <host_port>:<container_port>

  # Media streaming
  plex:
    image: linuxserver/plex:latest
    container_name: plex
    extra_hosts: *host-server
    network_mode: host # TODO: why is this on network mode host?
    devices:
      # This basically mounts the GPU device on the host to the container, needed for hardware transcoding.
      # For a RPi 4 this won't do anything as plex does not support transcoding on anything other than Intel quicksync.
      # You can comment or delete this if you want. Leaving it as it is won't do any harm.
      - "/dev/dri:/dev/dri"
    restart: unless-stopped
    ports:
      - 32400:32400
      # NOTE: Please delete this entire `devices` section if your device does not have /dev/dri device. If you using something
      # like RPi3, you would need to delete this section else you will get an error when trying to run this container.
    environment:
      PUID: ${PLEX_UID?Please configure PLEX_UID in .env file}
      PGID: ${MEDIA_GID?Please configure MEDIA_GID in .env file}
      TZ: ${TZ:-Australia/Melbourne}
    volumes:
      # Docker bind mounts are used to store config and media on the host's filesystem. Config for plex will be stored
      # in the .env-defined CONFIG_DIR/plex/config directory and any transcoding data is stored in a transcode directory
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/plex/config:/config
      - ${TRANSCODE_DIR:?Please configure TRANSCODE_DIR in .env file}:/transcode
      # Within plex, we are mounting the root of your media folder, as defined by the .env, to /all_media directory. So within plex, 
      # when you look inside /all_media directory you would see the same file structure as on the host
      - ${DATA_DIR:?Please configure DATA_DIR in .env file}/media:/all_media

  # Outbound VPN connection
  # can confirm connectivity by jumping into the container and running "wget -q -O- http://ipecho.net/plain"
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    extra_hosts: *host-server
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    # This might be so that gluetun can access the host's network, so that it can route all traffic through the VPN. Unsure
    devices:
      - /dev/net/tun:/dev/net/tun
    networks:
      - media_net
    ports:
      #- 8080:8080/tcp # HTTP proxy
      # - 8388:8388/tcp # Shadowsocks
      # - 8388:8388/udp # Shadowsocks
      - ${QBIT_WEBUI_PORT:-8080}:${QBIT_WEBUI_PORT:-8080} # port for qbittorrent. make sure to change it in the qBit webUI too!
    environment:
      PUID: ${GLUETUN_UID?Please configure GLUETUN_UID in .env file}
      PGID: ${GLUETUN_GID?Please configure GLUETUN_GID in .env file}
      TZ: ${TZ:-Australia/Melbourne}
      # https://github.com/qdm12/gluetun-wiki/blob/main/setup/providers/protonvpn.md
      VPN_SERVICE_PROVIDER: protonvpn
      OPENVPN_USER: ***REMOVED***
      OPENVPN_PASSWORD: ***REMOVED***
      SERVER_COUNTRIES: Spain,Netherlands,Switzerland,Sweden
    volumes:
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/gluetun:/config
    labels:
      # This is to disable watchtower from updating this container, because Containers connected to Gluetun lose connection once Gluetun is restarted
      # can choose to monitor only, or fully disable
      #- "com.centurylinklabs.watchtower.monitor-only=true"   
      - com.centurylinklabs.watchtower.enable=false

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    #extra_hosts: *host-server  # this causes an issue when used with network_mode: "service:gluetun"
    restart: unless-stopped
    network_mode: "service:gluetun"
    environment:
      PUID: ${QBITTOREENT_UID?Please configure QBITTOREENT_UID in .env file}
      PGID: ${MEDIA_GID?Please configure MEDIA_GID in .env file}
      TZ: ${TZ:-Australia/Melbourne}
      WEBUI_PORT: ${QBIT_WEBUI_PORT:-8080}
    volumes:
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/qbittorrent:/config
      - ${DATA_DIR:?Please configure ROOT_DATA_DIR in .env file}/torrents:/data/torrents
    # As per https://github.com/qdm12/gluetun-wiki/blob/main/setup/connect-a-container-to-gluetun.md, no need to set 'depends on' 
    # as the network_mode: "service:gluetun" will ensure that qbittorrent will only start once gluetun is healthy
    # depends_on:
    #   gluetun:
    #     condition: service_healthy

  # Torrent Indexer management
  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    extra_hosts: *host-server
    restart: unless-stopped
    networks:
      - media_net
    ports:
      - 9696:9696
    environment:
      PUID: ${PROWLARR_UID?Please configure PROWLARR_UID in .env file}
      PGID: ${MEDIA_GID?Please configure MEDIA_GID in .env file}
      TZ: ${TZ:-Australia/Melbourne}
    volumes:
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/prowlarr:/config

  # Movies management
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    extra_hosts: *host-server
    restart: unless-stopped
    networks:
      - media_net
    ports:
      # Host port 7878 is mapped to container port 7878
      - 7878:7878
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      PUID: ${RADARR_UID?Please configure RADARR_UID in .env file}
      PGID: ${MEDIA_GID?Please configure MEDIA_GID in .env file}
      TZ: ${TZ:-Australia/Melbourne}
    volumes:
      # config directory
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/radarr:/config
      # root directory, so that radarr can see downloads as well as stored media
      - ${DATA_DIR:?Please configure DATA_DIR in .env file}:/data

  # Series management
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    extra_hosts: *host-server
    restart: unless-stopped
    networks:
      - media_net
    ports:
      # Host port 8989 is mapped to container port 8989
      - 8989:8989
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      PUID: ${SONARR_UID?Please configure SONARR_UID in .env file}
      PGID: ${MEDIA_GID?Please configure MEDIA_GID in .env file}
      TZ: ${TZ:-Australia/Melbourne}
    volumes:
      # config directory
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/sonarr:/config
      # root directory, so that sonarr can see downloads as well as stored media
      - ${DATA_DIR:?Please configure DATA_DIR in .env file}:/data

  # Tautulli is used to get stats on Plex usage
  tautulli:
    container_name: tautulli
    image: linuxserver/tautulli:latest
    extra_hosts: *host-server
    restart: unless-stopped
    networks:
      - media_net
    ports:
      # Host port 8181 is mapped to container port 8181
      - "8181:8181"
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      PUID: ${TAUTULLI_UID?Please configure TAUTULLI_UID in .env file}
      PGID: ${MEDIA_GID?Please configure MEDIA_GID in .env file}
      TZ: ${TZ:-Australia/Melbourne}
    volumes:
      # config directory
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/tautulli:/config
      # Tautulli needs access to plex logs. In the plex container we mounted /mnt/external-workdir/plex of the host as the
      # config directory for plex. Logs are located within this config directory
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/plex/config/Library/Application Support/Plex Media Server/Logs:/logs

  # A whole bunch of stuff, but mainly using for Trash-Guides sync
  notifiarr:
    container_name: notifiarr
    hostname: notifiarr
    image: golift/notifiarr
    extra_hosts: *host-server
    restart: unless-stopped
    networks:
      - media_net
    ports:
      - 5454:5454
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      PUID: ${NOTIFIARR_UID?Please configure NOTIFIARR_UID in .env file}
      PGID: ${MEDIA_GID?Please configure MEDIA_GID in .env file}
      TZ: ${TZ:-Australia/Melbourne}
    volumes:
      - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/notifiarr:/config
      - /var/run/utmp:/var/run/utmp
      - /etc/machine-id:/etc/machine-id

networks:

  ## Assumption / Precondition: the network 'media_net' exist, either defined in home_services_stack or 
  ## manually via the command "docker network create --attachable --subnet=172.200.0.0/24 media_net"
  media_net:
    external: true
  ## Following network definition left for posterity
  # media_net:
  #   name: media_net   # ensure network isn't prefixed with the default name of the directory, eg git_media_stack_media_net
  #   attachable: true
  #   ipam:
  #     config:
  #       - subnet: 172.200.0.0/24



  ######################
  #                    #
  #    TESTING SHIZ    #
  #                    #
  ######################

  # lidarr:
  #   image: linuxserver/lidarr:latest
  #   restart: always
  #   container_name: lidarr
  #   extra_hosts: *host-server
  #   ports:
  #     # Host port 8686 is mapped to container port 8686
  #     - 8686:8686
  #   environment:
  #     # The container is run as the user with this PUID and PGID (user and group id).
  #     PUID: 1000
  #     PGID: 1000
  #     TZ: Australia/Melbourne
  #   volumes:
  #     # lidarr needs to know where the downloaded media is. This is told to lidarr by transmission
  #     - /mnt/media/downloads:/downloads
  #     - /mnt/media/downloads:/data
  #     # config directory
  #     - /mnt/media/appdata/lidarr:/config
  #     # Music imported by lidarr is stored in /mnt/media/music directory on the host. lidarr sees this directory
  #     # as /music. Within lidarr make your root folder as /music
  #     - /mnt/media/music:/music


  # Overseerr is used to manage media requests for both Sonarr and Radarr, combining them both into one portal
  # overseerr:
  #   image: sctx/overseerr:latest
  #   container_name: overseerr
  #   extra_hosts: *host-server
  #   restart: unless-stopped
  #   networks: 
  #     - media_net
  #   ports:
  #     - 5055:5055
  #   environment:
  #     LOG_LEVEL: debug
  #     TZ: ${TZ:-Australia/Melbourne}
  #     PORT: 5055 #optional
  #     PUID: 1015
  #     PGID: 1015
  #   volumes:
  #     - ${CONFIG_DIR:?Please configure CONFIG_DIR in .env file}/overseerr:/app/config



  # Sonarr at present does not support netimport lists like Radarr does. On Radarr you can setup it up to import movies
  # from Lists like IMDB lists or themoviedb.org lists. Using these lists, you can just add the movies you want to
  # these lists and radarr will sync up with these lists and then start downloading and managing the movies.
  # Similar thing is not available for sonarr. So this service can sync the TV shows from TVDB.com list and add them
  # to sonarr. So basically you create an account on TVDB.com and then you would get a username and you can create an
  # API KEY. You would need these to use this service. Once this service is setup, any TV shows that you add to your
  # favourites list will be fetched at the SYNC_INTERVAL and added to sonarr. Sonarr then would start downloading and
  # managing this TV show
  # sonarr_netimport:
  #   image: thundermagic/sonarr_netimport:latest
  #   restart: unless-stopped
  #   container_name: sonarr_netimport
  #   extra_hosts: *host-server
  #   environment:
  #     TVDB_USERNAME: ***REMOVED***
  #     TVDB_USER_KEY: ***REMOVED***
  #     TVDB_API_KEY: tvdb_api_key   #TODO: probably need to get this from tvdb, costs $11.99 / year
  #     # IP address and port number where sonarr can be accessed
  #     SONARR_IP: 192.168.100.3
  #     SONARR_PORT: 8989
  #     # Sonarr app API key. This is on sonarr under settings>general
  #     SONARR_API_KEY: sonarr_api_key
  #     SYNC_INTERVAL: 3600  # Interval at which to sync with TVDB, in seconds
  #     SEARCH_MISSING_EPISODES: 1  # 1 is True
  #     QUALITY_PROFILE_ID: 1  # 1 is profile any
  #     MONITORED: 1  # 1 is True
  #     ROOT_FOLDER_PATH: /tv/  # Full path of root folder
  #     # Below variables are for sending error notification emails. If not needed, delete these
  #     EMAIL_ADDRESS: ***REMOVED***
  #     EMAIL_PASSWORD: ***REMOVED***
  #     EMAIL_TO_ADDRESS: ***REMOVED***
  #     SMTP_SERVER: smtp.gmail.com
  #     SMTP_SERVER_PORT: 587

  # Similar to sonarr_netimport but for radarr. Radarr has this feature built-in but radarr uses TMDB API v3 and
  # I have noticed that if using v3 API, TMDB only returns maximum of 500 movies in the list.
  # This is resolved if using TMDB API v4.
  # radarr_netimport:
  #   image: thundermagic/radarr_netimport:latest
  #   restart: unless-stopped
  #   container_name: radarr_netimport
  #   environment:
  #     TMDB_ACCESS_TOKEN: sampletoken
  #     TMDB_API_KEY: tvdb_api_key
  #     TMDB_LIST_ID: 12345
  #     # IP address and port number where radarr can be accessed
  #     RADARR_IP: 192.168.100.3
  #     RADARR_PORT: 7878
  #     # radarr API key. This is on radarr under settings>general
  #     RADARR_API_KEY: radarr_api_key
  #     SYNC_INTERVAL: 3600  # Interval at which to sync with TMDB, in seconds
  #     QUALITY_PROFILE_ID: 1  # 1 is profile any
  #     ROOT_FOLDER_PATH: /movies/  # Full path of root folder
